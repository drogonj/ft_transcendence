services:
  front-end:
    container_name: front-end
    build: services/front-end
    ports:
      - "8080:443"
    depends_on:
      - user-management
    volumes:
      #- nginx:/singlepageapp
      - django:/tmp_static/
    networks:
      - network
    env_file:
      - .env
    entrypoint: sh -c "sh /entrypoint.sh"
    restart: on-failure

  postgres-master-1:
    container_name: postgres-master-1
    build: ./services/postgres-master-1/
    env_file: .env
    expose:
      - "5432"
    networks:
      - network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./services/postgres-master-1/00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
    restart: on-failure

#  postgres-replica-1:
#    container_name: postgres-replica-1
#    build: ./services/postgres-replica-1/
#    ports:
#      - "5433:5432"
#    environment:
#      PGUSER: replicator
#      PGPASSWORD: replicator_password
#    command: |
#      bash -c "
#      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres-master-1 --port=5432 --username=replicator
#      do
#      echo 'Waiting for primary to connect...'
#      sleep 1s
#      done
#      echo 'Backup done, starting replica...'
#      chmod 0700 /var/lib/postgresql/data
#      postgres
#      "
#    networks:
#      - network
#    depends_on:
#      - postgres-master-1
#    restart: on-failure

  user-management:
    container_name: user-management
    build: ./services/user-management/
    expose:
      - "8000"
    volumes:
      - django:/singlepageapp
      - vault-token:/vault/token:ro
      - vault-ssl:/vault/ssl:ro
    networks:
      - network
    depends_on:
      - redis
    env_file:
      - .env
    restart: on-failure

  chat:
    container_name: chat
    build: ./services/chat/
    expose:
      - "8001"
    volumes:
      - django:/singlepageapp/chat
    networks:
      - network
    depends_on:
      - redis
    env_file:
      - .env
    restart: on-failure

  vault:
    build: ./services/vault/
    container_name: vault
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    env_file:
      - .env
    networks:
      - network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
     - vault-data:/vault/data
     - vault-token:/vault/token
     - vault-ssl:/vault/ssl
    hostname: 'vault'
    environment:
      TZ: 'Europe/Paris'
      VAULT_SKIP_IP_AUTO_CONFIG: 'true'
    restart: on-failure

  back-game:
    container_name: back-game-pong
    build: services/back-game-pong/
    expose:
      - "2605"
    env_file: .env
    networks:
     - network
    restart: on-failure

  back-matchmaking:
    container_name: back-matchmaking-pong
    build: services/back-matchmaking-pong/
    expose:
      - "2607"
    env_file: .env
    networks:
      - network
    restart: on-failure

  redis:
    container_name: redis
    build: ./services/redis/
    env_file: .env
    expose:
      - "6379"
    depends_on:
      postgres-master-1:
        condition: service_healthy
    volumes:
      - redis:/var/lib/redis
    networks:
      - network
    restart: on-failure

networks:
  network:
    driver: bridge

volumes:
  nginx:
  django:
  vault-data:
  vault-token:
  vault-ssl:
  redis:
