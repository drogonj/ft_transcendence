services:
  front-end:
    container_name: front-end
    build: services/front-end
    ports:
      - "8080:443"
    restart: always
    depends_on:
      - user-management
    volumes:
      - django:/tmp_static/
    networks:
      - network
    entrypoint: sh -c "sh /entrypoint.sh"

  user-management:
    container_name: user-management
    build: ./services/user-management/
    expose:
      - "8000"
    volumes:
      - django:/singlepageapp
    networks:
      - network
    depends_on:
      redis:
        condition: service_started
    env_file:
      - .env

  chat:
    container_name: chat
    build: ./services/chat/
    expose:
      - "8001"
    volumes:
      - django:/singlepageapp/chat
    networks:
      - network
    depends_on:
      - redis
    env_file:
      - .env

  postgres:
    container_name: postgres
    build: ./services/postgres/
    env_file: .env
    expose:
      - "5432"
    networks:
     - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  vault_1:
    build: ./services/vault1/
    container_name: vault_1
    expose:
      - 8200
      - 8201
    volumes:
      - 'vault-token:/vault/token/'
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_ADDR=http://vault_1:8200
    command: sleep infinity
    networks:
      - network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  vault_2:
    build: ./services/vault2/
    container_name: vault_2
    expose:
      - 8200
      - 8201
    volumes:
      - 'vault-token:/vault/token/'
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_ADDR=http://vault_2:8200
    command: sleep infinity
    networks:
      - network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      vault_1:
        condition: service_healthy
    env_file:
      - .env

  vault_3:
    build: ./services/vault3/
    container_name: vault_3
    expose:
      - 8200
      - 8201
    volumes:
      - 'vault-token:/vault/token/'
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_ADDR=http://vault_3:8200
    command: sleep infinity
    networks:
      - network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      vault_2:
        condition: service_healthy

  vault_4:
    build: ./services/vault4/
    container_name: vault_4
    expose:
      - 8200
      - 8201
    volumes:
      - 'vault-token:/vault/token/'
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_ADDR=http://vault_4:8200
    command: sleep infinity
    networks:
      - network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      vault_2:
        condition: service_healthy


  back-game:
    container_name: back-game-pong
    build: services/back-game-pong/
    ports:
      - "2605:2605"
    env_file: .env
    networks:
     - network

  redis:
    container_name: redis
    build: ./services/redis/
    env_file: .env
    expose:
      - "6379"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - redis:/var/lib/redis
    networks:
      - network

networks:
  network:
    driver: bridge

volumes:
  nginx:
  django:
  vault-token:
  redis: