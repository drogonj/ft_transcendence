services:
  front-end:
    container_name: front-end
    build: services/front-end
    ports:
      - "8080:443"
    restart: always
    depends_on:
      - user-management
    volumes:
      - django:/tmp_static/
    networks:
      - network
    entrypoint: sh -c "sh /entrypoint.sh"

  user-management:
    container_name: user-management
    build: ./services/user-management/
    expose:
      - "8000"
    volumes:
      - django:/singlepageapp
    networks:
      - network
    depends_on:
      redis:
        condition: service_started
      vault:
        condition: service_healthy
    env_file:
      - .env

  chat:
    container_name: chat
    build: ./services/chat/
    expose:
      - "8001"
    volumes:
      - django:/singlepageapp/chat
    networks:
      - network
    depends_on:
      - redis
    env_file:
      - .env

  postgres:
    container_name: postgres
    build: ./services/postgres/
    env_file: .env
    expose:
      - "5432"
    networks:
     - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  vault:
    container_name: vault
    build: ./services/vault/
    restart: always
    hostname: 'vault'
    environment:
      VAULT_ADDR: 'https://127.0.0.1:8200'  # Changé de 'https://vault:8200'
      VAULT_CACERT: '/vault/ssl/ca.crt'
      VAULT_CLIENT_CERT: '/vault/ssl/vault.crt'
      VAULT_CLIENT_KEY: '/vault/ssl/vault.key'
      TZ: 'Europe/Paris'
      VAULT_SKIP_IP_AUTO_CONFIG: 'true'
    ports:
      - '8200:8200'
    volumes:
      - './services/vault/logs:/vault/logs'
      - './services/vault/plugins:/vault/plugins'
      - './services/vault/ssl:/vault/ssl'
      - './services/vault/file:/vault/file'
      - './services/vault/config:/vault/config'
      - './services/vault/data:/vault/data'
      - './services/vault/token:/vault/token'
    cap_add:
      - IPC_LOCK
    networks:
      - network  # Assurez-vous que ce réseau est défini
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  back-game:
    container_name: back-game-pong
    build: services/back-game-pong/
    ports:
      - "2605:2605"
    env_file: .env
    networks:
     - network

  redis:
    container_name: redis
    build: ./services/redis/
    env_file: .env
    expose:
      - "6379"
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
    volumes:
      - redis:/var/lib/redis
    networks:
      - network

networks:
  network:
    driver: bridge

volumes:
  django:
  redis:
  vault-data:
