services:
  front-end:
    container_name: front-end
    build: services/front-end
    ports:
      - "8080:443"
    volumes:
      - django:/tmp_static/
    networks:
      - network
    env_file:
      - .env
    entrypoint: sh -c "sh /entrypoint.sh"
    restart: on-failure

  pg-0:
    image: bitnami/postgresql-repmgr:14
    expose:
      - 5432
    volumes:
      - pg_0_data:/bitnami/postgresql
    env_file:
      - .env
    environment:
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-0,pg-1,pg-2
      - REPMGR_NODE_NAME=pg-0
      - REPMGR_NODE_NETWORK_NAME=pg-0
    networks:
      - db
    restart: on-failure

  pg-1:
    image: bitnami/postgresql-repmgr:14
    expose:
      - 5432
    volumes:
      - pg_1_data:/bitnami/postgresql
    env_file:
      - .env
    environment:
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-0,pg-1,pg-2
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
    networks:
      - db
    restart: on-failure

  pgpool:
    build: ./services/pgpool/
    expose:
      - 5432
    env_file:
      - .env
    environment:
      - PGPOOL_POSTGRES_USERNAME=${POSTGRESQL_USERNAME}
      - PGPOOL_POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
      - PGPOOL_SR_CHECK_USER=${POSTGRESQL_USERNAME}
      - PGPOOL_SR_CHECK_PASSWORD=${POSTGRESQL_PASSWORD}
      - PGPOOL_SR_CHECK_DATABASE=${POSTGRESQL_DATABASE}
    healthcheck:
      test: ["CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 50
    networks:
      - db
      - network
    volumes:
      - pg_certs:/opt/bitnami/pgpool/certs
    restart: on-failure
    logging:
      driver: "none"

  user-management:
    container_name: user-management
    build: ./services/user-management/
    expose:
      - "8000"
    volumes:
      - django:/singlepageapp
      - vault-token:/vault/token
      - vault-ssl:/vault/ssl
      - pg_certs:/opt/bitnami/pgpool/certs
    networks:
      - network
      - db
    # depends_on:
    #   redis:
    #     condition: service_started
    #   pgpool:
    #     condition: service_healthy
    env_file:
      - .env
    restart: on-failure

  chat:
    container_name: chat
    build: ./services/chat/
    expose:
      - "8001"
    volumes:
      - django:/singlepageapp/chat
    networks:
      - network
    env_file:
      - .env
    restart: on-failure

  vault_1:
    build: ./services/vault1/
    container_name: vault_1
    volumes:
      - vault-token:/vault/token/
      - vault-ssl:/vault/ssl
    cap_add:
      - IPC_LOCK
    networks:
      - network
    ports:
      - "8201:8200"

  vault_2:
    build: ./services/vault2/
    container_name: vault_2
    volumes:
      - vault-token:/vault/token/
      - vault-ssl:/vault/ssl
    cap_add:
      - IPC_LOCK
    networks:
      - network
    env_file:
      - .env
    ports:
      - "8202:8200"

  vault_3:
    build: ./services/vault3/
    container_name: vault_3
    volumes:
      - vault-token:/vault/token/
      - vault-ssl:/vault/ssl/
    cap_add:
      - IPC_LOCK
    networks:
      - network
    ports:
      - "8203:8200"

  vault_4:
    build: ./services/vault4/
    container_name: vault_4
    volumes:
      - vault-token:/vault/token/
      - vault-ssl:/vault/ssl
    cap_add:
      - IPC_LOCK
    networks:
      - network
    ports:
      - "8204:8200"

  vault-init:
    build: ./services/vault-init
    volumes:
      - vault-token:/vault/token
      - vault-ssl:/vault/ssl
    env_file:
      - .env
    networks:
      - network
      
  back-game:
    container_name: back-game-pong
    build: services/back-game-pong/
    expose:
      - "2605"
    env_file: .env
    networks:
     - network
    restart: on-failure

  back-matchmaking:
    container_name: back-matchmaking-pong
    build: services/back-matchmaking-pong/
    expose:
      - "2607"
    env_file: .env
    networks:
      - network
    restart: on-failure

  back-tournament:
    container_name: back-tournament-pong
    build: services/back-tournament-pong/
    expose:
      - "2610"
    env_file: .env
    networks:
      - network

  redis:
    container_name: redis
    build: ./services/redis/
    env_file: .env
    expose:
      - "6379"
    volumes:
      - redis:/var/lib/redis
    networks:
      - network
    restart: on-failure

networks:
  network:
    driver: bridge
  db:
    driver: bridge

volumes:
  nginx:
  django:
  vault-token:
  vault-ssl:
  redis:
  pg_certs:
    driver: local
  pg_0_data:
    driver: local
  pg_1_data:
    driver: local
